import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("Missing TELEGRAM_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –Ø–∑—ã–∫–∏
LANGUAGES = {
    "ru": "–†—É—Å—Å–∫–∏–π",
    "en": "English",
    "ua": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "pl": "Polski"
}
USER_LANG = {}

# –ú–µ–Ω—é
def get_main_menu(lang="ru"):
    menu = {
        "ru": ["–ö—Ä–∏–ø—Ç–∞", "–ü—Ä–æ–≥–Ω–æ–∑", "–ü–æ–¥–ø–∏—Å–∫–∞", "–Ø–∑—ã–∫"],
        "en": ["Crypto", "Forecast", "Subscribe", "Language"],
        "ua": ["–ö—Ä–∏–ø—Ç–∞", "–ü—Ä–æ–≥–Ω–æ–∑", "–ü—ñ–¥–ø–∏—Å–∫–∞", "–ú–æ–≤–∞"],
        "pl": ["Krypto", "Prognoza", "Subskrypcja", "Jƒôzyk"]
    }
    buttons = [KeyboardButton(text) for text in menu.get(lang, menu["ru"])]
    return ReplyKeyboardMarkup(resize_keyboard=True).add(*buttons)

@dp.message_handler(commands=["start"])
async def start_cmd(msg: types.Message):
    lang = USER_LANG.get(msg.from_user.id, "ru")
    await msg.answer("ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!" if lang == "ru" else "ü§ñ Welcome!",
                     reply_markup=get_main_menu(lang))

@dp.message_handler(commands=["help"])
async def help_cmd(msg: types.Message):
    await msg.reply("–ö–æ–º–∞–Ω–¥—ã: /start, /help, /predict, /subscribe")

@dp.message_handler(commands=["predict"])
async def predict_cmd(msg: types.Message):
    await msg.answer("üìä –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message_handler(commands=["subscribe"])
async def subscribe_cmd(msg: types.Message):
    await msg.answer("üîî –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! (—Ñ–∏–∫—Ç–∏–≤–Ω–æ)")

@dp.message_handler(lambda m: m.text in LANGUAGES.values())
async def set_language(msg: types.Message):
    for code, name in LANGUAGES.items():
        if msg.text == name:
            USER_LANG[msg.from_user.id] = code
            await msg.answer(f"‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {name}", reply_markup=get_main_menu(code))
            break

@dp.message_handler(lambda m: m.text.lower() in ["–∫—Ä–∏–ø—Ç–∞", "crypto"])
async def crypto_info(msg: types.Message):
    await msg.answer("üìà Bitcoin: $100546\nEthereum: $506.68\nRipple: $2.15")

@dp.message_handler(lambda m: m.text.lower() in ["–ø—Ä–æ–≥–Ω–æ–∑", "forecast"])
async def forecast(msg: types.Message):
    await msg.answer("üìä –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–µ—Ç.")

@dp.message_handler(lambda m: m.text.lower() in ["–ø–æ–¥–ø–∏—Å–∫–∞", "subscribe"])
async def subs(msg: types.Message):
    await msg.answer("üîî –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å.")

@dp.message_handler(lambda m: m.text.lower() in ["—è–∑—ã–∫", "language", "–º–æ–≤–∞", "jƒôzyk"])
async def lang_select(msg: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*[KeyboardButton(v) for v in LANGUAGES.values()])
    await msg.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)