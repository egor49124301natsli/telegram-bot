# bot.py
import os
import aiohttp
import requests              
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ODDS_API_KEY = os.getenv("ODDS_API_KEY")

if not TELEGRAM_TOKEN:
    raise ValueError("Missing TELEGRAM_TOKEN")

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(bot)

# –Ø–∑—ã–∫–∏
LANGUAGES = {
    "ru": "–†—É—Å—Å–∫–∏–π",
    "en": "English",
    "ua": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "pl": "Polski"
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_MENU = {
    "ru": ["–ö—Ä–∏–ø—Ç–∞", "–ü—Ä–æ–≥–Ω–æ–∑", "–ü–æ–¥–ø–∏—Å–∫–∞", "AI –ø—Ä–æ–≥–Ω–æ–∑", "–Ø–∑—ã–∫"],
    "en": ["Crypto", "Forecast", "Subscribe", "AI Forecast", "Language"],
    "ua": ["–ö—Ä–∏–ø—Ç–∞", "–ü—Ä–æ–≥–Ω–æ–∑", "–ü—ñ–¥–ø–∏—Å–∫–∞", "AI –ø—Ä–æ–≥–Ω–æ–∑", "–ú–æ–≤–∞"],
    "pl": ["Krypto", "Prognoza", "Subskrypcja", "AI prognoza", "Jƒôzyk"]
}

USER_LANG = {}
SUBSCRIBERS = set()

def is_subscribed(user_id):
    return user_id in SUBSCRIBERS

def get_lang(user_id):
    return USER_LANG.get(user_id, "ru")

def main_menu(lang):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for btn in MAIN_MENU.get(lang, MAIN_MENU["ru"]):
        kb.add(KeyboardButton(btn))
    return kb

@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    user_id = msg.from_user.id
    lang = get_lang(user_id)
    await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu(lang))

@dp.message_handler(commands=["admin"])
async def admin_panel(msg: types.Message):
    await msg.answer(f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {', '.join(map(str, USER_LANG.keys()))}")

@dp.message_handler(lambda m: m.text.lower() in ["–∫—Ä–∏–ø—Ç–∞", "crypto"])
async def crypto_info(msg: types.Message):
    await msg.answer("ü™ô Bitcoin: $100546\nEthereum: $506.68\nRipple: $2.15")

@dp.message_handler(lambda m: m.text.lower() in ["–ø—Ä–æ–≥–Ω–æ–∑", "forecast", "prognoza"])
async def forecast(msg: types.Message):
    await msg.answer("üìâ –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–µ—Ç.")

@dp.message_handler(lambda m: m.text.lower() in ["–ø–æ–¥–ø–∏—Å–∫–∞", "subscribe", "subskrypcja"])
async def subs(msg: types.Message):
    SUBSCRIBERS.add(msg.from_user.id)
    await msg.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å.")

@dp.message_handler(lambda m: m.text.lower() in ["—è–∑—ã–∫", "language", "–º–æ–≤–∞", "jƒôzyk"])
async def lang_select(msg: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*[KeyboardButton(LANGUAGES[k]) for k in LANGUAGES])
    await msg.answer("üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=kb)

@dp.message_handler(lambda m: m.text in LANGUAGES.values())
async def set_language(msg: types.Message):
    code = next((k for k, v in LANGUAGES.items() if v == msg.text), "ru")
    USER_LANG[msg.from_user.id] = code
    await msg.answer(f"‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {msg.text}", reply_markup=main_menu(code))

def get_ai_prediction():
    url = "https://api.the-odds-api.com/v4/sports/soccer_epl/odds"
    params = {
        "apiKey": ODDS_API_KEY,
        "regions": "eu",
        "markets": "h2h",
        "oddsFormat": "decimal"
    }

    try:
        res = requests.get(url, params=params)
        if res.status_code != 200:
            return "‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

        data = res.json()
        if not data:
            return "‚ö†Ô∏è –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        match = data[0]
        teams = match["teams"]
        odds = match["bookmakers"][0]["markets"][0]["outcomes"]
        best = max(odds, key=lambda x: x["price"])
        confidence = round(1 / best["price"] * 100, 2)

        return (
            f"üß† AI –ø—Ä–æ–≥–Ω–æ–∑:\n"
            f"‚öΩ {teams[0]} vs {teams[1]}\n"
            f"üìÖ {match['commence_time'][:10]} {match['commence_time'][11:16]}\n"
            f"‚úÖ –ü–æ–±–µ–¥–∞: {best['name']}\n"
            f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}%"
        )
    except Exception:
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞."

@dp.message_handler(lambda m: m.text.lower() in ["ai –ø—Ä–æ–≥–Ω–æ–∑", "ai forecast", "ai prognoza"])
async def ai_forecast(msg: types.Message):
    user_id = msg.from_user.id
    if not is_subscribed(user_id):
        await msg.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.\n–ù–∞–∂–º–∏—Ç–µ /subscribe.")
async def check_subscription(user_id):
    # –ü–æ–∫–∞ –ª–æ–≥–∏–∫–∞ —Ñ–∏–∫—Ç–∏–≤–Ω–∞—è ‚Äî —Ç—ã –º–æ–∂–µ—à—å –∑–¥–µ—Å—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ Firebase –∏–ª–∏ –¥—Ä—É–≥–æ–µ API
    return user_id in SUBSCRIBERS

    prediction = get_ai_prediction()
    await msg.answer(prediction)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)@dp.message_handler(lambda m: m.text.lower() == 'ai –ø—Ä–æ–≥–Ω–æ–∑')
async def ai_forecast(msg: types.Message):
    if not await check_subscription(msg.from_user.id):
        await msg.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
        return

    headers = {"X-API-Key": os.getenv("ODDS_API_KEY")}
    params = {"regions": "eu", "markets": "h2h", "oddsFormat": "decimal"}

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://api.the-odds-api.com/v4/sports/soccer_epl/odds", params=params, headers=headers) as resp:
                data = await resp.json()

        if not data:
            await msg.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return

        match = data[0]
        home = match["home_team"]
        away = match["away_team"]
        odds = match["bookmakers"][0]["markets"][0]["outcomes"]
        home_odds = odds[0]["price"]
        away_odds = odds[1]["price"]
        favorite = home if home_odds < away_odds else away
        confidence = round(100 / min(home_odds, away_odds))

        text = f"ü§ñ *AI –ü—Ä–æ–≥–Ω–æ–∑*\n–ú–∞—Ç—á: *{home} vs {away}*\nüìà –ü–æ–±–µ–¥–∏—Ç: *{favorite}*\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: *{confidence}%*"
        await msg.answer(text, parse_mode="Markdown")

    except Exception as e:
        await msg.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}")
